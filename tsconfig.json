{
  "compilerOptions": {
    "target": "ESNext",
    "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "ESNext",
    "moduleResolution": "node",
    "resolveJsonModule": true, // jsonのimportを有効にできる

    /* JavaScript Support */
    "allowJs": true, // jsをtsにimportできる

    /* Emit */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    "esModuleInterop": true, // moduleの仕様をいい感じにしてくれる。allowSyntheticDefaultImportsもオンになる。
    "forceConsistentCasingInFileNames": true, // importのファイル名の大文字小文字を判定する

    /* Type Checking */
    "strict": true,
    "noImplicitAny": true,
    "noUnusedLocals": true, // 未使用のローカル変数があるとエラー
    "noUnusedParameters": true, // 関数内に未使用のパラメーターがあるとエラー
    "noUncheckedIndexedAccess": true, // 配列の要素やオブジェクトのプロパティへのアクセスを厳密に
    "allowUnreachableCode": false, // 到達不可能なコードがあるとエラー
  },
  "include": ["src/ts/**/*", "src/tsx/**/*"], // コンパイル対象のディレクトリ指定
}
